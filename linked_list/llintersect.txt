//Approaches for finding the intersection point of two lists.


//Approach 1 with 2 loops...O(n^2)
* create 2 heads
* create 2 dummy nodes -> repective head-> next
* loop till dummy1 != NULL
       loop till dummy2 != NULL
	  extract each element from dummy2 and compare with dummy1
	  if match found{
	      Intersection point is dummy1/dummy2->node
	      return;
	  }
       end loop
 end loop
 print("Lists not intersecting")

//Approach 2 with hash ... O(n+m)
* create 2 heads
* create 2 dummy nodes -> repective head-> next
* loop till dummy1 != NULL                                //let the length be 'n'
  add lists to hash struct
* loop till dummy2 != NULL                                //let the length be 'm'
  if dummy2 found in hash return the respective node


//Approach 3 with finding the difference between the counts of 2 lists... O(m+n)
* create 2 heads.
* find the length of 2 lists using heads while head->next != NULL
* find the +ve difference b/w the 2 , d = c2-c1
* if d>0 traverse c2 that many times and then compare the 2 lists moving pointers one by one.
* if d<0 traverse c1 that many times and then compare 2 lists moving pointers 1 by 1.
* if found intersection then return it else return "Not found"

//Approach 4
* Take a visited flag with each node
* Traverse the first list and marked its visited flag to true
* Traverse the second list and if you find the visited flag true while parsing \
  then that denotes the intersecting node

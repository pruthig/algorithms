Closest pair algorithm:

For 1-D - Sort the points according to the 1-Dimension and pick the smallest between the 2 values in the order.

ClosestPair of a set of points:
1. Divide the set into two equal sized parts by the line l, and recursively compute the minimal distance in each part.
2. Let d be the minimal of the two minimal distances.
3. Eliminate points that lie farther than d apart from l
4. Sort the remaining points according to their y-coordinates
5. Scan the remaining points in the y order and compute the distances of each point to its five neighbors.
6. If any of these distances is less than d then update d.

Steps 2-6 define the merging process which must be repeated logn times because this is a divide and conquer algortithm:
Step 2 takes O(1) time
Step 3 takes O(n) time
Step 4 is a sort that takes O(nlogn) time
Step 5 takes O(n) time (as we saw in the previous section)
Step 6 takes O(1) time

Master theorem:
Used to determine running time of recursive algorithms.
Defined as:

T(n) = a * T( n / b ) + O( n^d )  where
a -> Number of recursive calls
b -> Factor by which input problem is divided, e.g for merge sort it is 2
d -> Denotes the effort put while combining the solution.

a = b^d  ==>  O( (n^d)*logn )
b^d > a  ==>  O( n^d )
a > b^d  ==>  O( n^(logb^a) )

Effort put in recursion = c*n^d * ( (j = 0 to logb ) Σ ( (a / b^d )^j )


Quicksort Algorithm:
> Elegant and in place
> Practical with O(nlogn) time

Steps:
Choose a pivot
Run a loop so that all elements < pivot are to the left of the pivot and rest to the right
Quicksort runs in O(n^2) if sorted array is passed because only 1st half will be executed since 2 halfs are not divided evenly.
or we can call it as unbalanced split.
Efficiency:
Efficiency of Quicksort is O(nlogn). First, Big-Oh is the number of comparisons of elements in the given set.
For Quicksort if 'C' denotes the sum of  all comparisons:
C = (i=0 to n-1) Σ (j = i+1 to n)  Σ Sum[ Prob(i,j] ]    -  (1)                // where prob[i,j] is the probability that the elements a[i] and a[j] will be compared.
Let the elements be --> z(i) ... | ... z(j)
Now z(i) and z(j) will be compared only when any of these is selected as a pivot element, the probability of the same is - 2 / (j-i+1)
Putting this in Eqn. (1)


C = (i=0 to n-1) Σ (j = i+1 to n)  Σ Sum(2 / (j-i+1)) or
C = 2*n* Σ (j = i+1 to n) 1 / (j-i+1) or
C = 2*n*logn or
C = n*logn           - Q.E.D

Order Statistics:
Nearly a quicksort. It just that we are looking for 'i'th position and we recurse once either going to left or to right not on both sides.
T(n) = T(n/2) + O(n)  ==>  O(n)

 ****************  Graphs *********************
 
 Minimum cut/Graph partition is a dividing graph in 2 so that there are minimum number of crossing edges.
 
 N defines the number of vertices and M defined the number of edges.
 M =  Ω(N) = O(N^2)
 
 
 
 




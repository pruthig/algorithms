Book Title,Chapter Title,Date of Highlight,Book URL,Chapter URL,Annotation URL,Highlight,Personal Note
Inside the C++ Object Model,7. On the Cusp of the Object Model,10/5/2021,https://learning.oreilly.com/library/view/-/0201834545/,https://learning.oreilly.com/library/view/-/0201834545/ch07.html,https://learning.oreilly.com/library/view/-/0201834545/ch07.html#9ef8b126-add4-4ae0-ba77-96a8efb12ef6,The first slot of the virtual table contains the address of the type_info object associated with the class type addressed by pt,
Inside the C++ Object Model,7. On the Cusp of the Object Model,10/5/2021,https://learning.oreilly.com/library/view/-/0201834545/,https://learning.oreilly.com/library/view/-/0201834545/ch07.html,https://learning.oreilly.com/library/view/-/0201834545/ch07.html#a6a227cd-33e8-40f9-b7be-156522689d83,"Within C++, a polymorphic class is one that contains either an inherited or declared virtual function.",
Inside the C++ Object Model,7. On the Cusp of the Object Model,10/5/2021,https://learning.oreilly.com/library/view/-/0201834545/,https://learning.oreilly.com/library/view/-/0201834545/ch07.html,https://learning.oreilly.com/library/view/-/0201834545/ch07.html#d6c5ceba-6361-4fec-aaa2-adffa6ddbfef,exception data stack,
Inside the C++ Object Model,7. On the Cusp of the Object Model,10/5/2021,https://learning.oreilly.com/library/view/-/0201834545/,https://learning.oreilly.com/library/view/-/0201834545/ch07.html,https://learning.oreilly.com/library/view/-/0201834545/ch07.html#f5f9d3e5-3403-432a-ba7f-40e0b1039864,"An exception table is generated for each function. It describes the regions associated with the function, the location of any necessary cleanup code (invocation of local class object destructors), and the location of catch clauses if a region is within an active try block.",
Inside the C++ Object Model,7. On the Cusp of the Object Model,10/1/2021,https://learning.oreilly.com/library/view/-/0201834545/,https://learning.oreilly.com/library/view/-/0201834545/ch07.html,https://learning.oreilly.com/library/view/-/0201834545/ch07.html#da74fc91-53be-44fe-afdf-2cf794929d44,class expression templates are evaluated at compile time rather than runtime,
Inside the C++ Object Model,6. Runtime Semantics,9/29/2021,https://learning.oreilly.com/library/view/-/0201834545/,https://learning.oreilly.com/library/view/-/0201834545/ch06.html,https://learning.oreilly.com/library/view/-/0201834545/ch06.html#215cddd1-5199-4f13-8c60-fc39b1583c38,"Rather, we need to explicitly invoke the destructor and preserve the storage for reuse:",
Inside the C++ Object Model,6. Runtime Semantics,9/29/2021,https://learning.oreilly.com/library/view/-/0201834545/,https://learning.oreilly.com/library/view/-/0201834545/ch06.html,https://learning.oreilly.com/library/view/-/0201834545/ch06.html#a24f009f-f35d-4e3c-8c96-d0b2100f8b8a,"persists for the lifetime of the reference initialized or until the end of the scope in which the temporary is created, whichever comes first.",
Inside the C++ Object Model,6. Runtime Semantics,9/29/2021,https://learning.oreilly.com/library/view/-/0201834545/,https://learning.oreilly.com/library/view/-/0201834545/ch06.html,https://learning.oreilly.com/library/view/-/0201834545/ch06.html#08e6dfa0-05b2-4650-879e-f6d01babcfcc,is implemented without the generation of a temporary.,"Generally, overloaded addition operator is optimized out by compiler."
Inside the C++ Object Model,6. Runtime Semantics,9/29/2021,https://learning.oreilly.com/library/view/-/0201834545/,https://learning.oreilly.com/library/view/-/0201834545/ch06.html,https://learning.oreilly.com/library/view/-/0201834545/ch06.html#9a553021-2f2a-49b5-bfb2-9092b62e6ae5,The second half of the placement new operator expansion is the automatic,Placement new also invokes the constructor.
Inside the C++ Object Model,6. Runtime Semantics,9/29/2021,https://learning.oreilly.com/library/view/-/0201834545/,https://learning.oreilly.com/library/view/-/0201834545/ch06.html,https://learning.oreilly.com/library/view/-/0201834545/ch06.html#03267f33-5c77-4251-a40a-d253b6a37638,How is this caching of the element count implemented?,"How does compiler knows how much is the array size which needs to be deleted. It's implementation dependent, but one strategy is to maintain associative array:
<pointer_memory, size_allocated>"
Inside the C++ Object Model,6. Runtime Semantics,9/29/2021,https://learning.oreilly.com/library/view/-/0201834545/,https://learning.oreilly.com/library/view/-/0201834545/ch06.html,https://learning.oreilly.com/library/view/-/0201834545/ch06.html#cd1cc6a5-82f8-400a-9902-d57c897552f9,"If a class defines a default constructor, however, some version of vec_new() is invoked to allocate and construct the array of class objects","If we create an array of objects, a synthesized function is called that allocates memory and invokes constructor for each object."
Inside the C++ Object Model,6. Runtime Semantics,9/28/2021,https://learning.oreilly.com/library/view/-/0201834545/,https://learning.oreilly.com/library/view/-/0201834545/ch06.html,https://learning.oreilly.com/library/view/-/0201834545/ch06.html#71682844-c46c-4279-a461-66cb6ad62307,"Although it is legal to write

new T[ 0 ];",
Inside the C++ Object Model,6. Runtime Semantics,9/28/2021,https://learning.oreilly.com/library/view/-/0201834545/,https://learning.oreilly.com/library/view/-/0201834545/ch06.html,https://learning.oreilly.com/library/view/-/0201834545/ch06.html#127dbd3a-c9c9-4419-b877-aeb4159aaced,"Point knots[ 10 ]; 
vec_new( &knots, sizeof( Point ), 10, &Point::Point, 0 );","So, on declaration of an array, an extra function is created that initializes the Point variables and also stores meta-data -> starting address, count of variable. Same function can be used for variable-sized arrays."
Inside the C++ Object Model,6. Runtime Semantics,9/28/2021,https://learning.oreilly.com/library/view/-/0201834545/,https://learning.oreilly.com/library/view/-/0201834545/ch06.html,https://learning.oreilly.com/library/view/-/0201834545/ch06.html#5229bac8-5dc3-4fe2-8ff0-5d79e31a495a,"First, a temporary was introduced to guard mat_identity’s initialization.","So, to prevent invocation of constructor for static local objects, a flag can be used."
Inside the C++ Object Model,6. Runtime Semantics,9/28/2021,https://learning.oreilly.com/library/view/-/0201834545/,https://learning.oreilly.com/library/view/-/0201834545/ch06.html,https://learning.oreilly.com/library/view/-/0201834545/ch06.html#bd82ae93-adaa-48d6-a960-ca0f8fbff883,drawbacks to using statically initialized objects,We can't write exception handling code for global objects. This is the main drawback of static initialization of objects.
Inside the C++ Object Model,6. Runtime Semantics,9/28/2021,https://learning.oreilly.com/library/view/-/0201834545/,https://learning.oreilly.com/library/view/-/0201834545/ch06.html,https://learning.oreilly.com/library/view/-/0201834545/ch06.html#04223937-4f87-4fc1-abe2-9ab6001225a9,a _main() function to invoke all the __sti() functions within the executable and an exit() function to analogously invoke all the __std() functions.,"Hence, a function to construct and destruct global object was added by compiler."
Inside the C++ Object Model,6. Runtime Semantics,9/28/2021,https://learning.oreilly.com/library/view/-/0201834545/,https://learning.oreilly.com/library/view/-/0201834545/ch06.html,https://learning.oreilly.com/library/view/-/0201834545/ch06.html#8c301122-6cf2-4f32-bb26-1d031e3f4935,All globally visible objects in C++ are placed within the program data segment,
Inside the C++ Object Model,"5. Semantics of Construction, Destruction, and Copy",9/28/2021,https://learning.oreilly.com/library/view/-/0201834545/,https://learning.oreilly.com/library/view/-/0201834545/ch05.html,https://learning.oreilly.com/library/view/-/0201834545/ch05.html#f5d2cb7a-1cdb-47b7-a0ab-91bcb961b19a,An object’s lifetime ends with the beginning of its destructor’s execution,
Inside the C++ Object Model,"5. Semantics of Construction, Destruction, and Copy",9/28/2021,https://learning.oreilly.com/library/view/-/0201834545/,https://learning.oreilly.com/library/view/-/0201834545/ch05.html,https://learning.oreilly.com/library/view/-/0201834545/ch05.html#4242be77-ab3e-47e6-892b-c0a75a4e47ab,effectively disallows bitwise copy semantics,
Inside the C++ Object Model,"5. Semantics of Construction, Destruction, and Copy",9/27/2021,https://learning.oreilly.com/library/view/-/0201834545/,https://learning.oreilly.com/library/view/-/0201834545/ch05.html,https://learning.oreilly.com/library/view/-/0201834545/ch05.html#7a0a177c-8a57-4f03-8c14-784bc9da41bf,only nontrivial instances are synthesized,
Inside the C++ Object Model,"5. Semantics of Construction, Destruction, and Copy",9/27/2021,https://learning.oreilly.com/library/view/-/0201834545/,https://learning.oreilly.com/library/view/-/0201834545/ch05.html,https://learning.oreilly.com/library/view/-/0201834545/ch05.html#ac6b27be-849d-475f-a701-855896d3c4c2,A class does not exhibit bitwise copy semantics for the default copy assignment operator in the following cases,
Inside the C++ Object Model,"5. Semantics of Construction, Destruction, and Copy",9/27/2021,https://learning.oreilly.com/library/view/-/0201834545/,https://learning.oreilly.com/library/view/-/0201834545/ch05.html,https://learning.oreilly.com/library/view/-/0201834545/ch05.html#4e05e5d9-536b-43df-8f47-b616040a882a,"Within the derived class constructor, all virtual base class and then immediate base class constructors are invoked","So, timeline of constructor
> First call virtual base class constructors and the immediate base class constructors
> Set the vptr so that correct function is called statically
> Expand initialization list in constructor
> Execute user-supplied code in constructor"
Inside the C++ Object Model,"5. Semantics of Construction, Destruction, and Copy",9/27/2021,https://learning.oreilly.com/library/view/-/0201834545/,https://learning.oreilly.com/library/view/-/0201834545/ch05.html,https://learning.oreilly.com/library/view/-/0201834545/ch05.html#4df3b784-1410-48a3-9071-e0b6759eb380,The answer is after the invocation of the base class constructors,vptrs are set after base class constructors have been called.
Inside the C++ Object Model,"5. Semantics of Construction, Destruction, and Copy",9/27/2021,https://learning.oreilly.com/library/view/-/0201834545/,https://learning.oreilly.com/library/view/-/0201834545/ch05.html,https://learning.oreilly.com/library/view/-/0201834545/ch05.html#07f4aa55-3291-4353-a701-95f006b75af8,"within the constructors (and destructor) of a class (in this case, our Point3d class), the invocation of a virtual function by the object under construction (in this case, our PVertex object) is limited to the virtual functions active within the class",
Inside the C++ Object Model,"5. Semantics of Construction, Destruction, and Copy",9/27/2021,https://learning.oreilly.com/library/view/-/0201834545/,https://learning.oreilly.com/library/view/-/0201834545/ch05.html,https://learning.oreilly.com/library/view/-/0201834545/ch05.html#c989e307-2596-4b7b-bb3d-429f41b7e712,"The traditional strategy for supporting this sort of “now you initialize the virtual base class, now you don’t” is to introduce an additional argument in the constructor(s)",The additional argument in constructor helps in deciding whether it should call top-level constructor or not.
Inside the C++ Object Model,"5. Semantics of Construction, Destruction, and Copy",9/21/2021,https://learning.oreilly.com/library/view/-/0201834545/,https://learning.oreilly.com/library/view/-/0201834545/ch05.html,https://learning.oreilly.com/library/view/-/0201834545/ch05.html#dd1a75c0-cf67-4f0b-87fe-d62c53cce8b0,trivial,"A constructor of a class A is trivial if all the following are true:
> It is implicitly defined (compiler synthesized)
> A has no virtual functions and no virtual base classes
> All the direct base classes of A have trivial constructors
> The classes of all the non-static data members of A have trivial constructors"
Inside the C++ Object Model,"5. Semantics of Construction, Destruction, and Copy",9/21/2021,https://learning.oreilly.com/library/view/-/0201834545/,https://learning.oreilly.com/library/view/-/0201834545/ch05.html,https://learning.oreilly.com/library/view/-/0201834545/ch05.html#4be8921c-c847-4ea0-874a-be549e1be940,"// Pseudo C++ Code 
Point *heap = __new( sizeof( Point )); 
if ( heap != 0 ) 
   heap->Point::Point();",Point *heap = new Point; expands to above calls.
Inside the C++ Object Model,"5. Semantics of Construction, Destruction, and Copy",9/21/2021,https://learning.oreilly.com/library/view/-/0201834545/,https://learning.oreilly.com/library/view/-/0201834545/ch05.html,https://learning.oreilly.com/library/view/-/0201834545/ch05.html#c41dbd7e-017e-4217-a81e-9131f8283f1d,local1’s initialization is slightly more efficient than that of local2’s. This is because the values within the initialization list can be placed within local1’s memory during placement of the function’s activation record upon the program stack.,
Inside the C++ Object Model,"5. Semantics of Construction, Destruction, and Copy",9/21/2021,https://learning.oreilly.com/library/view/-/0201834545/,https://learning.oreilly.com/library/view/-/0201834545/ch05.html,https://learning.oreilly.com/library/view/-/0201834545/ch05.html#22ea026e-5a09-486c-af94-3430271c8b36,Neither the private nor public access labels nor the member function declarations take up any space within the object.,
Inside the C++ Object Model,"5. Semantics of Construction, Destruction, and Copy",9/21/2021,https://learning.oreilly.com/library/view/-/0201834545/,https://learning.oreilly.com/library/view/-/0201834545/ch05.html,https://learning.oreilly.com/library/view/-/0201834545/ch05.html#d28647e7-5071-4d83-bfb8-a8e836cf129f,Not declaring a function const means the function cannot be called by a const reference or const pointer argument,
Inside the C++ Object Model,"5. Semantics of Construction, Destruction, and Copy",9/21/2021,https://learning.oreilly.com/library/view/-/0201834545/,https://learning.oreilly.com/library/view/-/0201834545/ch05.html,https://learning.oreilly.com/library/view/-/0201834545/ch05.html#3e06b22b-532f-42d4-b30e-a5283d43bdae,"one may both define and invoke a pure virtual function, provided it is invoked statically",
Inside the C++ Object Model,4. The Semantics of Function,9/20/2021,https://learning.oreilly.com/library/view/-/0201834545/,https://learning.oreilly.com/library/view/-/0201834545/ch04.html,https://learning.oreilly.com/library/view/-/0201834545/ch04.html#4b548a33-c9c5-495b-b070-b0b32e1d9247,My recommendation is not to declare nonstatic data members within a virtual base class,
Inside the C++ Object Model,4. The Semantics of Function,9/20/2021,https://learning.oreilly.com/library/view/-/0201834545/,https://learning.oreilly.com/library/view/-/0201834545/ch04.html,https://learning.oreilly.com/library/view/-/0201834545/ch04.html#873da209-fdc8-4369-936c-02ca3d7441dc,"Under multiple inheritance, a derived class contains n – 1 additional virtual tables, where n represents the number of its immediate base classes (thus single inheritance introduces zero additional tables). For the Derived class, then, two virtual tables are generated:

The primary instance shared with Base1, its leftmost base class

A secondary instance associated with Base2, the second base class","Suppose there are n classes in inheritance hierarchy, then first base class and derived class will be combined and virtual tables for rest of the classes are copied as such"
Inside the C++ Object Model,4. The Semantics of Function,9/20/2021,https://learning.oreilly.com/library/view/-/0201834545/,https://learning.oreilly.com/library/view/-/0201834545/ch04.html,https://learning.oreilly.com/library/view/-/0201834545/ch04.html#f0a7c2b1-07d4-4dba-8ba1-1d1391a78f7d,Sun compiler concatenates the multi-ple virtual tables into one.,
Inside the C++ Object Model,4. The Semantics of Function,9/20/2021,https://learning.oreilly.com/library/view/-/0201834545/,https://learning.oreilly.com/library/view/-/0201834545/ch04.html,https://learning.oreilly.com/library/view/-/0201834545/ch04.html#d333707a-0852-4cdc-b739-e85371bb9fc9,"Thus when a Base1 or Derived pointer is assigned the address of a Derived class object, the virtual table being accessed is the primary virtual table vtbl__Derived. When a Base2 pointer is assigned the address of a Derived class object, the virtual table being accessed is the second virtual table vtbl__Base2__Derived.",
Inside the C++ Object Model,4. The Semantics of Function,9/20/2021,https://learning.oreilly.com/library/view/-/0201834545/,https://learning.oreilly.com/library/view/-/0201834545/ch04.html,https://learning.oreilly.com/library/view/-/0201834545/ch04.html#cd0faf14-4dc8-4265-aa03-d0cc79d78ef3,thunk is a small assembly stub that (a) adjusts the this pointer with the appropriate offset and then (b) jumps to the virtual function,Virtual table is generated at compile time and necessary thunks and offsets are available at runtime for use.
Inside the C++ Object Model,4. The Semantics of Function,9/20/2021,https://learning.oreilly.com/library/view/-/0201834545/,https://learning.oreilly.com/library/view/-/0201834545/ch04.html,https://learning.oreilly.com/library/view/-/0201834545/ch04.html#49857b60-4e8d-4da3-9dc3-f7ec2641c185,delete pbase2,"When it comes to deletion by base class pointer, base class pointer is now readjusted and started pointing to start  of derived class so that derived class destruction is done."
Inside the C++ Object Model,4. The Semantics of Function,9/20/2021,https://learning.oreilly.com/library/view/-/0201834545/,https://learning.oreilly.com/library/view/-/0201834545/ch04.html,https://learning.oreilly.com/library/view/-/0201834545/ch04.html#04a6c201-e62e-4274-b011-fb0c02b28b6f,The address of the new Derived object must be adjusted to address its Base2 subobject,
Inside the C++ Object Model,4. The Semantics of Function,9/20/2021,https://learning.oreilly.com/library/view/-/0201834545/,https://learning.oreilly.com/library/view/-/0201834545/ch04.html,https://learning.oreilly.com/library/view/-/0201834545/ch04.html#c7d36948-ccde-4de5-8583-71bcafb0b6bc,we know that each instance’s address is contained in slot 4.,Slot of virtual function is known at compile time.
Inside the C++ Object Model,4. The Semantics of Function,9/20/2021,https://learning.oreilly.com/library/view/-/0201834545/,https://learning.oreilly.com/library/view/-/0201834545/ch04.html,https://learning.oreilly.com/library/view/-/0201834545/ch04.html#aae57cb4-8bbb-4183-8bcb-da07fa166410,the virtual destructor is likely to be assigned slot 1,"Destructor, if declared virtual, is also added to the virtual function table."
Inside the C++ Object Model,4. The Semantics of Function,9/20/2021,https://learning.oreilly.com/library/view/-/0201834545/,https://learning.oreilly.com/library/view/-/0201834545/ch04.html,https://learning.oreilly.com/library/view/-/0201834545/ch04.html#1eb91771-bc57-41e4-920c-d6fb7e476c07,The virtual table is generated on a per-class basis.,
Inside the C++ Object Model,4. The Semantics of Function,9/20/2021,https://learning.oreilly.com/library/view/-/0201834545/,https://learning.oreilly.com/library/view/-/0201834545/ch04.html,https://learning.oreilly.com/library/view/-/0201834545/ch04.html#65757c9a-6cf9-4091-ae96-925fb8640bef,"In C++, polymorphism “exhibits” itself as the potential addressing of a derived class object through a pointer or reference of a public base class.",
Inside the C++ Object Model,4. The Semantics of Function,9/18/2021,https://learning.oreilly.com/library/view/-/0201834545/,https://learning.oreilly.com/library/view/-/0201834545/ch04.html,https://learning.oreilly.com/library/view/-/0201834545/ch04.html#e5eae511-7abb-4a2c-93dd-b1c90c21e9bf,(( Point3d* ) 0 )->object_count();,Idiom to invoke static member function when everything was allowed via class objects.
Inside the C++ Object Model,4. The Semantics of Function,9/18/2021,https://learning.oreilly.com/library/view/-/0201834545/,https://learning.oreilly.com/library/view/-/0201834545/ch04.html,https://learning.oreilly.com/library/view/-/0201834545/ch04.html#717be65f-562c-4a12-a094-bd006162f0fe,"If Point3d::normalize() were a static member function, both its invocations",
Inside the C++ Object Model,4. The Semantics of Function,9/18/2021,https://learning.oreilly.com/library/view/-/0201834545/,https://learning.oreilly.com/library/view/-/0201834545/ch04.html,https://learning.oreilly.com/library/view/-/0201834545/ch04.html#24a13746-5c48-4999-bbeb-1ec7c2d74e96,"In general, member names are made unique by concatenating the name of the member with that of the class","So, all member functions in actual are transformed and looks alike that of non-member functions. Similar name mangling is done for member variables so that we can have same member within the derived as well as base class. In case of function overloading the the formal parameter list is appended to function name."
Inside the C++ Object Model,4. The Semantics of Function,9/18/2021,https://learning.oreilly.com/library/view/-/0201834545/,https://learning.oreilly.com/library/view/-/0201834545/ch04.html,https://learning.oreilly.com/library/view/-/0201834545/ch04.html#c16abcec-b538-46ed-a5d5-b0bd406e0bfb,"C++ supports three flavors of member functions: static, nonstatic, and virtual",Three type of functions.
Inside the C++ Object Model,3. The Semantics of Data,9/18/2021,https://learning.oreilly.com/library/view/-/0201834545/,https://learning.oreilly.com/library/view/-/0201834545/ch03.html,https://learning.oreilly.com/library/view/-/0201834545/ch03.html#54f303c2-562e-46a8-9fc4-0818fa3b129b,taking the address of a nonstatic data member yields its offset within the class,"class X { int x, y; };
X x1;
&X::y returns 0x4 and &x1.x returns actual address."
Inside the C++ Object Model,3. The Semantics of Data,9/18/2021,https://learning.oreilly.com/library/view/-/0201834545/,https://learning.oreilly.com/library/view/-/0201834545/ch03.html,https://learning.oreilly.com/library/view/-/0201834545/ch03.html#32af56ac-fd1d-437d-8e57-8c186fd74743,"A class containing one or more virtual base class subobjects, such as istream, is divided into two regions","In case of virtual inheritance, the data of virtual base subobject is divided into 2 sections - invariant region and shared region. shared region contains the data of virtual base class object and invariant is the data of derived class."
Inside the C++ Object Model,3. The Semantics of Data,9/18/2021,https://learning.oreilly.com/library/view/-/0201834545/,https://learning.oreilly.com/library/view/-/0201834545/ch03.html,https://learning.oreilly.com/library/view/-/0201834545/ch03.html#4cd3f562-985f-4534-9bdd-b2927ce898fb,Point2d::operator+=( rhs );,calling '+=' operator of base class
Inside the C++ Object Model,3. The Semantics of Data,9/18/2021,https://learning.oreilly.com/library/view/-/0201834545/,https://learning.oreilly.com/library/view/-/0201834545/ch03.html,https://learning.oreilly.com/library/view/-/0201834545/ch03.html#4a3e9b12-2fe7-4ef3-8601-1cfa1320bfe6,The offset of each nonstatic data member is known at compile time,
Inside the C++ Object Model,3. The Semantics of Data,9/18/2021,https://learning.oreilly.com/library/view/-/0201834545/,https://learning.oreilly.com/library/view/-/0201834545/ch03.html,https://learning.oreilly.com/library/view/-/0201834545/ch03.html#e5c4d23c-d55b-40c8-9d85-ca36418cb8a7,"There is still only a single instance of the member within the program, and its access is direct","In case we have static data member in top base class in inheritance hierarchy, same is shared among the derived classes."
Inside the C++ Object Model,2. The Semantics of Constructors,9/17/2021,https://learning.oreilly.com/library/view/-/0201834545/,https://learning.oreilly.com/library/view/-/0201834545/ch02.html,https://learning.oreilly.com/library/view/-/0201834545/ch02.html#777b9704-20e6-4e03-8eac-56aeeaada545,"Use of both memcpy() and memset(), however, works only if the classes do not contain any compiler-generated internal members.",
Inside the C++ Object Model,2. The Semantics of Constructors,9/17/2021,https://learning.oreilly.com/library/view/-/0201834545/,https://learning.oreilly.com/library/view/-/0201834545/ch02.html,https://learning.oreilly.com/library/view/-/0201834545/ch02.html#cf178727-ea7f-4d5d-bc10-166547ddff1b,"The copying of an object’s vptr value, however, ceases to be safe when an object of a base class is initialized with an object of a class derived from it",Object slicing has side-effects of non-safe copying of virtual pointer in that base class object is now pointing to virtual table of derived class.
Inside the C++ Object Model,2. The Semantics of Constructors,9/14/2021,https://learning.oreilly.com/library/view/-/0201834545/,https://learning.oreilly.com/library/view/-/0201834545/ch02.html,https://learning.oreilly.com/library/view/-/0201834545/ch02.html#5820f35f-3e41-45ee-b262-fa0852b737eb,"Programmers new to C++ often have two common misunderstandings:

That a default constructor is synthesized for every class that does not define one

That the compiler-synthesized default constructor provides explicit default initializers for each data member declared within the class",
Inside the C++ Object Model,2. The Semantics of Constructors,9/13/2021,https://learning.oreilly.com/library/view/-/0201834545/,https://learning.oreilly.com/library/view/-/0201834545/ch02.html,https://learning.oreilly.com/library/view/-/0201834545/ch02.html#e80bd2ce-ffa7-41bc-8d75-e168234b2bd1,"However, it does not synthesize a default constructor","If an object creation is tried without any arguments for a class which has parameterized constructor but no default constructor, error is emitted."
Inside the C++ Object Model,2. The Semantics of Constructors,9/13/2021,https://learning.oreilly.com/library/view/-/0201834545/,https://learning.oreilly.com/library/view/-/0201834545/ch02.html,https://learning.oreilly.com/library/view/-/0201834545/ch02.html#b464979f-c0c7-46a5-bd3b-80c6b5e86b01,"compiler augments the existing constructors, inserting code that invokes the necessary default constructors",Compiler adds code in derived-class constructor. That code is invocation of base-class constructor.
Inside the C++ Object Model,1. Object Lessons,9/13/2021,https://learning.oreilly.com/library/view/-/0201834545/,https://learning.oreilly.com/library/view/-/0201834545/ch01.html,https://learning.oreilly.com/library/view/-/0201834545/ch01.html#52e734c5-1dab-443b-83db-4c78aa1ced3b,derived type remaining,There is no concept of polymorphism in object slicing. Complete derived object cannot be assigned to base object because of memory constraints so that is sliced.
Inside the C++ Object Model,1. Object Lessons,9/13/2021,https://learning.oreilly.com/library/view/-/0201834545/,https://learning.oreilly.com/library/view/-/0201834545/ch01.html,https://learning.oreilly.com/library/view/-/0201834545/ch01.html#5f7c0a6e-bb79-4429-8201-f7ba91d69bf0,A pointer and a reference support polymorphism because they do not involve any type-dependent commitment of resources,
Inside the C++ Object Model,1. Object Lessons,9/13/2021,https://learning.oreilly.com/library/view/-/0201834545/,https://learning.oreilly.com/library/view/-/0201834545/ch01.html,https://learning.oreilly.com/library/view/-/0201834545/ch01.html#0cac4860-5cb6-4241-9430-e8566418c934,"The answer to the second question is that the compiler intercedes in the initialization and assignment of one class object with another. The compiler must ensure that if an object contains one or more vptrs, those vptr values are not initialized or changed by the source object",
Inside the C++ Object Model,1. Object Lessons,9/13/2021,https://learning.oreilly.com/library/view/-/0201834545/,https://learning.oreilly.com/library/view/-/0201834545/ch01.html,https://learning.oreilly.com/library/view/-/0201834545/ch01.html#85bab6fa-db41-450d-980b-35632ce30157,"When we write

pz->rotate(); 
the type of pz determines the following at compile time:

The fixed, available interface (that is, pz may invoke only the ZooAnimal public interface)

The access level of that interface (for example, rotate() is a public member of ZooAnimal)",Polymorphism - What we know at compile time?
Inside the C++ Object Model,1. Object Lessons,9/13/2021,https://learning.oreilly.com/library/view/-/0201834545/,https://learning.oreilly.com/library/view/-/0201834545/ch01.html,https://learning.oreilly.com/library/view/-/0201834545/ch01.html#e7da8a16-874a-44ee-9c69-b6e9b8d67fc1,pz cannot directly access any members other than those present within the ZooAnimal subobject,"If both base class pointer and derived class pointer pointing to a given derived object, base class pointer points to sub-object of base class in derived class and only has that much address span."
Inside the C++ Object Model,1. Object Lessons,9/13/2021,https://learning.oreilly.com/library/view/-/0201834545/,https://learning.oreilly.com/library/view/-/0201834545/ch01.html,https://learning.oreilly.com/library/view/-/0201834545/ch01.html#71f836ce-8bae-4496-92a8-61aa9ea2b942,it alters only the interpretation of the size and composition of the memory being addressed,
Inside the C++ Object Model,1. Object Lessons,9/13/2021,https://learning.oreilly.com/library/view/-/0201834545/,https://learning.oreilly.com/library/view/-/0201834545/ch01.html,https://learning.oreilly.com/library/view/-/0201834545/ch01.html#7105abfd-178d-40f5-98a5-df2b5827732a,polymorphic manipulation of an object requires that the object be accessed either through a pointer or a reference,
Inside the C++ Object Model,1. Object Lessons,9/13/2021,https://learning.oreilly.com/library/view/-/0201834545/,https://learning.oreilly.com/library/view/-/0201834545/ch01.html,https://learning.oreilly.com/library/view/-/0201834545/ch01.html#9b434de1-77dc-450c-8b82-113277a46974,"Composition, rather than inheritance, is the only portable method of combining C and C++ portions of a class",
Inside the C++ Object Model,1. Object Lessons,9/13/2021,https://learning.oreilly.com/library/view/-/0201834545/,https://learning.oreilly.com/library/view/-/0201834545/ch01.html,https://learning.oreilly.com/library/view/-/0201834545/ch01.html#dbedd0c5-a1d7-4dc6-a8f6-d2121a5b38a4,"The layout of data contained in multiple access sections, however, is left undefined",
"Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow, 2nd Edition",2. End-to-End Machine Learning Project,10/2/2020,https://learning.oreilly.com/library/view/-/9781492032632/,https://learning.oreilly.com/library/view/-/9781492032632/ch02.html,https://learning.oreilly.com/library/view/-/9781492032632/ch02.html#dca27094-e9a7-43df-bbf6-1b346d483a50,Popular open data repositories,"Links for datasets:

http://archive.ics.uci.edu/ml/
https://www.kaggle.com/datasets
https://registry.opendata.aws/
http://dataportals.org/
http://opendatamonitor.eu/
https://www.reddit.com/r/datasets
https://en.wikipedia.org/wiki/List_of_datasets_for_machine-learning_research
https://www.quora.com/Where-can-I-find-large-datasets-open-to-the-public

"
"Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow, 2nd Edition",1. The Machine Learning Landscape,10/2/2020,https://learning.oreilly.com/library/view/-/9781492032632/,https://learning.oreilly.com/library/view/-/9781492032632/ch01.html,https://learning.oreilly.com/library/view/-/9781492032632/ch01.html#65f98206-c08c-4f97-a5a6-328b24f70953,famous 1996 paper,Link to a paper
